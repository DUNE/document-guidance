#+TITLE: Guidance For Documents


This repository holds the source for a document to provide guidance on writing

- [[https://github.com/DUNE/protodune-tdr][The ProtoDUNE-SP TDR]]
- [[https://github.com/DUNE/lbne-fd-closeout][The DUNE Far Detector Closeout]]
- [[https://github.com/DUNE/lbn-cdr][The DUNE CDR]]

This page tells you how to access and build the LaTeX guidance document contained in this repository. The instructions on this page are also valid for accessing and building the document that you will be contributing to, e.g., the ProtoDUNE-SP TDR. 

This page also provides all the instructions you will need for interacting with git as you pull and push document files.

The document-guidance document provides guidance on editing in LaTeX according to the standards that we've set up for DUNE and LBNF.

Four important guidelines that will help avoid headaches:

1. *Please always do a pull immediately before you begin working on a file just in case someone else modified it recently.*
2. *We recommend that you compile frequently as you compose and edit; it will be easier to resolve any compilation problems.*
3. *Please make sure the document compiles before you commit it and push it to the repository. Ask Anne if you need help.*
4. *Please commit and push immediately after you finish your edits so that others have the best chance of picking up your changes before they edit.  (Yes, git can resolve conflicts, but it's better to avoid them.)*

* How the guidance document should be used

The documentation is in the form of a LaTeX document which tries to follow its own guidance and thus can be used as an extended example. Please read through it once when you start contributing content, and bookmark it for reference.  Don't worry about following it to the letter, the editor will fix things.  (But the less she has to fix, the quicker it goes!)

Please look at the tex files under the "guidance" directory to see how to make headings, labels, tables, figures, etc., according to standards we've set. Compare it to the built PDF of the document, which you can find at the [[https://github.com/DUNE/document-guidance/releases][GitHub releases area for this repository]].

A PDF of this guidance document is also generated through the services of [[https://www.sharelatex.com][ShareLaTeX]]

  https://www.sharelatex.com/github/repos/DUNE/document-guidance

Click "Previous Builds," click on the version's tag (at left), and on that second page, click the "Download PDF" button in front of "Build was successful!" (The "Download PDF" buttons on the first page don't work.)

* Getting started

This section describes how to 

1. check out the source to this document-guidance document from GitHub,
2. build it (after you edit it; editing information is in document-guidance itself), and 3. push commits back to GitHub.  

When working on a "real" document, substitute the actual document repository name for =document-guidance= in the examples on this page.

To get "push" access to a repository, [[https://help.github.com/articles/signing-up-for-a-new-github-account/][sign up for a GitHub account]] if you do not yet have one, then send the user name to
Brett Viren (see contacts below) and indicate which repository(ies) you need to
access.  (If you instead prefer to fork and issue pull requests, that
can likely be accommodated.  Check with the document technical
editors, listed below.)


** Initial clone

If you've just gone through the "Install on Mac" procedure, skip this step.
You will "clone" each remote repository that you need from GitHub into a dedicated directory on your local machine. First, set up a "parent" directory, e.g., /my/work/area.

Each GitHub repository web site provides a URL above the list of files; it starts with "https" and ends with ".git".  The HTTPS URL can be used for anonymous clone and then later can be pushed to (see below) by supplying your GitHub password.  The SSH URL requires uploading a public key to GitHub but then no password need be given.  Pick the URL you like and then cloning is simple:

#+BEGIN_EXAMPLE
  $ cd /my/work/area
  $ git clone <URL>
#+END_EXAMPLE

For example, to clone this repository using the HTTPS URL, do:

#+BEGIN_EXAMPLE
  $ cd /my/work/area
  $ git clone https://github.com/DUNE/document-guidance.git
  $ cd document-guidance
#+END_EXAMPLE

You should now have 
#+BEGIN_EXAMPLE
  /my/work/area/document-guidance
#+END_EXAMPLE

that includes the directories and files in this repository.

** Building a draft document

To make it easier to work as a team, we want people to be able to add and see comments, and to refer to line numbers.  These features will appear by default when you compile. 
To build the document, run `pdflatex` and `bibtex` on the main LaTeX file, in this case "guidance.tex".  Each repository will have a main LaTeX file; the bulk of the =.tex= files containing the document content should be in one or more subdirectories.  

#+BEGIN_EXAMPLE
  $ pdflatex guidance
  $ bibtex guidance
  $ pdflatex guidance
  $ pdflatex guidance
#+END_EXAMPLE

Unless bibliographic references change, you can usually see all the changes in subsequent builds by running:

#+BEGIN_EXAMPLE
  $ pdflatex guidance
  $ pdflatex guidance
#+END_EXAMPLE

It needs to be run twice to pick up any changes to the paging and numbering.

For documents with an acronym list, we provide a "compileitdraft" script that includes a "makeindex" command. Run:

#+BEGIN_EXAMPLE
 $ compileitdraft guidance
#+END_EXAMPLE

** Building a print-ready document

The technical editors are responsible for producing a clean
and properly built version of any document for internal and final
release, but anyone may compile a clean version.
To do that, replace each =pdflatex guidance= command
with this one like:

#+BEGIN_EXAMPLE
   $ pdflatex "\def\isfinal{1} \input{guidance}"
#+END_EXAMPLE

There is also a "compileitprint" script that produces a clean copy.  To compile the document you would run, e.g.,

#+BEGIN_EXAMPLE
$ compileitdraft guidance
#+END_EXAMPLE

 
* Interacting with the repository

Again, we strongly recommend that as you make changes to a document, you compile it periodically to make sure you haven't introduced errors. Verify that it compiles when you are done with your changes. Then commit the changes to your local cloned directory and please push them to GitHub immediately so that they are available to your colleagues.  

** General git procedure:

If you installed the GitHub for Mac, you can use the GUI provided to
pull, commit and push, if you prefer.  If you use a terminal command line, here is the procedure.

#+BEGIN_EXAMPLE
  $ cd /my/work/area/document-guidance
  # Pull down the latest commits from others just before you start.
  $ git pull
  # If this fails, see below.
  # Edit your files, save your changes, and verify that the document compiles.
  # If any of your files are new, add it/them before committing, e.g.,:
  $ git add path/to/the-new-file.tex
  $ git add path/to/figures/the-new-picture.pdf
  ...
  $ git commit -a -m "Brief explanation of what you updated"
  $ git push
  # If this fails, see below.
#+END_EXAMPLE

Sometimes =git pull= fails due to a conflict. If =git pull= doesn't work, "stash" your changes, try to pull again to get the latest commits (it should work after git stash), then "unstash" or "pop" your changes back in and resolve conflicts.

#+BEGIN_EXAMPLE
  $ git stash
  $ git pull
  $ git stash pop
  # Resolve the conflicts in the affected file(s); this can be tedious.
  # Edit, save, add files as listed above
  # Make sure the entire document compiles
  $ git commit -a -m "Your commit message"
  $ git push
#+END_EXAMPLE

If any commits have been pushed by others since the last time you did a =git pull= (or since your initial =git clone=) then git will not allow you to =push= until you have done a fresh =git pull=.  

If all else fails, save your changed files somewhere, blow away the repository and reclone it, then remake your edits.

** Git-phobic and/or LaTeX-phobic

Git works on all major computing platforms and many minor ones and is
successfully used by all manner of people.  If for
some reason you don't want to use Git we can work around that, however you need to always start from the latest files that you download from GitHub.

If you are willing and able to edit in LaTeX, grab the latest file from the repository, edit it and send it to Anne (see contacts below).

If you don't want to edit in LaTeX, please talk to Anne.



* Contacts

- Anne Heavey <aheavey@fnal.gov> 630-840-8039 (technical editor, content)

- Brett Viren <bv@bnl.gov> (technical editor, LaTeX machinery and repository)
